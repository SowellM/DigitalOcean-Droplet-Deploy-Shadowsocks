name: "Shadowsocks to DigitalOcean"
description: "Deploy a DigitalOcean droplet with Shadowsocks (TLS or TCP/UDP)."
author: "Mark Sowell"
branding:
  icon: "cloud"
  color: "blue"

inputs:
  domain:
    description: "Base domain (example.com)"
    required: true
  subdomain:
    description: "Subdomain (e.g. ss)"
    required: true
  email:
    description: "Email for Let's Encrypt"
    required: true
  password:
    description: "Shadowsocks password"
    required: true
  mode:
    description: "tls or tcp-udp"
    required: true
    default: "tcp-udp"
  region:
    description: "DigitalOcean region"
    required: false
    default: "sfo3"
  size:
    description: "Droplet size slug"
    required: false
    default: "s-1vcpu-512mb-10gb"
  image:
    description: "Droplet image slug"
    required: false
    default: "ubuntu-22-04-x64"
  hostname:
    description: "Droplet hostname"
    required: false
    default: "ss"
  digitalocean_access_token:
    description: "DigitalOcean API token"
    required: true
  digitalocean_ssh_key:
    description: "SSH key ID(s) in DigitalOcean"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install doctl
      shell: bash
      run: |
        curl -sL https://github.com/digitalocean/doctl/releases/download/v1.107.0/doctl-1.107.0-linux-amd64.tar.gz \
          | tar -xz -C /usr/local/bin doctl

    - name: Auth to DigitalOcean
      shell: bash
      run: doctl auth init -t "${{ inputs.digitalocean_access_token }}"

    - name: Prepare cloud-init
      shell: bash
      run: |
        cp .cloud-init.yml cloud-init.yml
        sed -i "s/__PASSWORD__/${{ inputs.password }}/g" cloud-init.yaml

    - name: Create Droplet
      shell: bash
      run: |
        doctl compute droplet create "${{ inputs.hostname }}" \
          --region "${{ inputs.region }}" \
          --size "${{ inputs.size }}" \
          --image "${{ inputs.image }}" \
          --ssh-keys "${{ inputs.digitalocean_ssh_key }}" \
          --user-data-file cloud-init.yaml \
          --monitoring \
          --wait \
          --format ID,PublicIPv4 \
          --no-header > droplet.txt

        DROPLET_ID=$(cut -d' ' -f1 droplet.txt)
        DROPLET_IP=$(cut -d' ' -f2 droplet.txt)

        echo "droplet_id=$DROPLET_ID" >> $GITHUB_OUTPUT
        echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
