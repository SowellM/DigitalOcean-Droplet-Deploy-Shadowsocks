name: "DigitalOcean Droplet Deploy Shadowsocks"
description: "DigitalOcean Droplet Deploy Shadowsocks"
author: "Mark Sowell"
branding:
  icon: "cloud"
  color: "blue"

inputs:
  domain:
    description: "Base domain (example.com)"
    required: true
  subdomain:
    description: "Subdomain (e.g. ss)"
    required: true
  email:
    description: "Email for Let's Encrypt"
    required: true
  password:
    description: "Shadowsocks password"
    required: true
  mode:
    description: "tls or tcp-udp"
    required: true
    default: "tcp-udp"
  region:
    description: "DigitalOcean region"
    required: false
    default: "sfo3"
  size:
    description: "Droplet size slug"
    required: false
    default: "s-1vcpu-512mb-10gb"
  image:
    description: "Droplet image slug"
    required: false
    default: "ubuntu-22-04-x64"
  hostname:
    description: "Droplet hostname"
    required: false
    default: "ss"
  digitalocean_access_token:
    description: "DigitalOcean API token"
    required: true
  digitalocean_ssh_key:
    description: "SSH key ID(s) in DigitalOcean"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install doctl
      shell: bash
      run: |
        curl -sL https://github.com/digitalocean/doctl/releases/download/v1.107.0/doctl-1.107.0-linux-amd64.tar.gz \
          | tar -xz -C /usr/local/bin doctl

    - name: Auth to DigitalOcean
      shell: bash
      run: doctl auth init -t "${{ inputs.digitalocean_access_token }}"

    - name: Prepare cloud-init
      shell: bash
      run: |
        cp .cloud-init.yml cloud-init.yml
        sed -i "s/__PASSWORD__/${{ inputs.password }}/g" cloud-init.yml
    - name: Prepare cloud-init
  shell: bash
  run: |
    cp cloud-init-template.yml cloud-init.yml

    if [ "${{ inputs.mode }}" = "tls" ]; then
      DOCKER_COMPOSE="version: '3.8'
services:
  shadowsocks:
    image: teddysun/shadowsocks-rust:latest
    restart: unless-stopped
    command: >
      ssserver -s 0.0.0.0:443
               -m chacha20-ietf-poly1305
               -k ${{ inputs.password }}
               --plugin v2ray-plugin
               --plugin-opts \"server;tls;host=${{ inputs.subdomain }}.${{ inputs.domain }};cert=/etc/letsencrypt/live/${{ inputs.subdomain }}.${{ inputs.domain }}/fullchain.pem;key=/etc/letsencrypt/live/${{ inputs.subdomain }}.${{ inputs.domain }}/privkey.pem\"
    ports:
      - '443:443'
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro"
    else
      DOCKER_COMPOSE="version: '3.8'
services:
  shadowsocks:
    image: teddysun/shadowsocks-rust:latest
    restart: unless-stopped
    command: >
      ssserver -s 0.0.0.0:443
               -m chacha20-ietf-poly1305
               -k ${{ inputs.password }}
    ports:
      - '443:443/tcp'
      - '443:443/udp'"
    fi

    sed -i "s#__DOCKER_COMPOSE__#${DOCKER_COMPOSE}#g" cloud-init.yml
    sed -i "s#__PASSWORD__#${{ inputs.password }}#g" cloud-init.yml
    sed -i "s#__DOMAIN__#${{ inputs.domain }}#g" cloud-init.yml
    sed -i "s#__SUBDOMAIN__#${{ inputs.subdomain }}#g" cloud-init.yml
    sed -i "s#__EMAIL__#${{ inputs.email }}#g" cloud-init.yml
    sed -i "s#__MODE__#${{ inputs.mode }}#g" cloud-init.yml

    - name: Create Droplet
      shell: bash
      run: |
        doctl compute droplet create "${{ inputs.hostname }}" \
          --region "${{ inputs.region }}" \
          --size "${{ inputs.size }}" \
          --image "${{ inputs.image }}" \
          --ssh-keys "${{ inputs.digitalocean_ssh_key }}" \
          --user-data-file cloud-init.yaml \
          --monitoring \
          --wait \
          --format ID,PublicIPv4 \
          --no-header > droplet.txt

        DROPLET_ID=$(cut -d' ' -f1 droplet.txt)
        DROPLET_IP=$(cut -d' ' -f2 droplet.txt)

        echo "droplet_id=$DROPLET_ID" >> $GITHUB_OUTPUT
        echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
